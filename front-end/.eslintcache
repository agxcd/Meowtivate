[{"/Users/ag/lighthouse/meowtivate/front-end/src/index.js":"1","/Users/ag/lighthouse/meowtivate/front-end/src/components/App.js":"2","/Users/ag/lighthouse/meowtivate/front-end/src/components/SMSForm.js":"3","/Users/ag/lighthouse/meowtivate/front-end/src/helpers/getCurrentDate.js":"4","/Users/ag/lighthouse/meowtivate/front-end/src/hooks/useApplicationData.js":"5","/Users/ag/lighthouse/meowtivate/front-end/src/components/404.jsx":"6","/Users/ag/lighthouse/meowtivate/front-end/src/pages/LoginPage.jsx":"7","/Users/ag/lighthouse/meowtivate/front-end/src/pages/WelcomePage.jsx":"8","/Users/ag/lighthouse/meowtivate/front-end/src/pages/RegisterPage.jsx":"9","/Users/ag/lighthouse/meowtivate/front-end/src/pages/InventoryPage.jsx":"10","/Users/ag/lighthouse/meowtivate/front-end/src/pages/ShopPage.jsx":"11","/Users/ag/lighthouse/meowtivate/front-end/src/pages/CatsPage.jsx":"12","/Users/ag/lighthouse/meowtivate/front-end/src/pages/AccountPage.jsx":"13","/Users/ag/lighthouse/meowtivate/front-end/src/pages/ListsPage.jsx":"14","/Users/ag/lighthouse/meowtivate/front-end/src/pages/DashboardPage.jsx":"15","/Users/ag/lighthouse/meowtivate/front-end/src/helpers/stateHelpers.js":"16","/Users/ag/lighthouse/meowtivate/front-end/src/components/Weather.js":"17","/Users/ag/lighthouse/meowtivate/front-end/src/components/Calendar-import.js":"18","/Users/ag/lighthouse/meowtivate/front-end/src/components/InventoryItem.jsx":"19","/Users/ag/lighthouse/meowtivate/front-end/src/components/NavBar.jsx":"20","/Users/ag/lighthouse/meowtivate/front-end/src/components/ShopItem.jsx":"21","/Users/ag/lighthouse/meowtivate/front-end/src/components/GalleryContainer.jsx":"22","/Users/ag/lighthouse/meowtivate/front-end/src/components/ListsContainer.jsx":"23","/Users/ag/lighthouse/meowtivate/front-end/src/helpers/calculateChecked.js":"24","/Users/ag/lighthouse/meowtivate/front-end/src/components/GalleryItem.js":"25","/Users/ag/lighthouse/meowtivate/front-end/src/components/Menu.jsx":"26","/Users/ag/lighthouse/meowtivate/front-end/src/components/CatPlant.jsx":"27","/Users/ag/lighthouse/meowtivate/front-end/src/components/Progress.jsx":"28","/Users/ag/lighthouse/meowtivate/front-end/src/components/ActionList.jsx":"29","/Users/ag/lighthouse/meowtivate/front-end/src/components/UnlockBadge.jsx":"30","/Users/ag/lighthouse/meowtivate/front-end/src/components/Popup.jsx":"31"},{"size":248,"mtime":1611526995068,"results":"32","hashOfConfig":"33"},{"size":3502,"mtime":1611527619261,"results":"34","hashOfConfig":"33"},{"size":3497,"mtime":1611529027355,"results":"35","hashOfConfig":"33"},{"size":533,"mtime":1611527067571,"results":"36","hashOfConfig":"33"},{"size":7322,"mtime":1611528177684,"results":"37","hashOfConfig":"33"},{"size":228,"mtime":1611210454057,"results":"38","hashOfConfig":"33"},{"size":1278,"mtime":1611526696241,"results":"39","hashOfConfig":"33"},{"size":1411,"mtime":1611450408690,"results":"40","hashOfConfig":"33"},{"size":1519,"mtime":1611216833415,"results":"41","hashOfConfig":"33"},{"size":1045,"mtime":1611527067571,"results":"42","hashOfConfig":"33"},{"size":1118,"mtime":1611527067571,"results":"43","hashOfConfig":"33"},{"size":1566,"mtime":1611527406990,"results":"44","hashOfConfig":"33"},{"size":2243,"mtime":1611526995070,"results":"45","hashOfConfig":"33"},{"size":461,"mtime":1611526995072,"results":"46","hashOfConfig":"33"},{"size":2290,"mtime":1611527460118,"results":"47","hashOfConfig":"33"},{"size":3367,"mtime":1611526995066,"results":"48","hashOfConfig":"33"},{"size":2416,"mtime":1611526696233,"results":"49","hashOfConfig":"33"},{"size":3931,"mtime":1611527240876,"results":"50","hashOfConfig":"33"},{"size":1201,"mtime":1611527067570,"results":"51","hashOfConfig":"33"},{"size":596,"mtime":1611526696229,"results":"52","hashOfConfig":"33"},{"size":1178,"mtime":1611527067571,"results":"53","hashOfConfig":"33"},{"size":839,"mtime":1611527251592,"results":"54","hashOfConfig":"33"},{"size":5015,"mtime":1611526995062,"results":"55","hashOfConfig":"33"},{"size":375,"mtime":1611526696236,"results":"56","hashOfConfig":"33"},{"size":1189,"mtime":1611527274321,"results":"57","hashOfConfig":"33"},{"size":1633,"mtime":1611527067571,"results":"58","hashOfConfig":"33"},{"size":2133,"mtime":1611527067570,"results":"59","hashOfConfig":"33"},{"size":569,"mtime":1611526995063,"results":"60","hashOfConfig":"33"},{"size":5317,"mtime":1611526995059,"results":"61","hashOfConfig":"33"},{"size":4565,"mtime":1611527333568,"results":"62","hashOfConfig":"33"},{"size":3821,"mtime":1611526696230,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"1523fzl",{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"66"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"66"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"66"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"66"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"66"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"66"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"66"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"66"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"66"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"66"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"66"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"66"},"/Users/ag/lighthouse/meowtivate/front-end/src/index.js",[],["139","140"],"/Users/ag/lighthouse/meowtivate/front-end/src/components/App.js",["141","142","143"],"/Users/ag/lighthouse/meowtivate/front-end/src/components/SMSForm.js",["144","145","146","147"],"/Users/ag/lighthouse/meowtivate/front-end/src/helpers/getCurrentDate.js",[],"/Users/ag/lighthouse/meowtivate/front-end/src/hooks/useApplicationData.js",[],"/Users/ag/lighthouse/meowtivate/front-end/src/components/404.jsx",[],"/Users/ag/lighthouse/meowtivate/front-end/src/pages/LoginPage.jsx",["148"],"import TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Link } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    fontFamily: \"Varela Round\",\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n  logo: {\n    fontFamily: \"itim\",\n    letterSpacing: \"8px\",\n  },\n  header: {\n    fontFamily: \"Varela Round\",\n    letterSpacing: \"6px\",\n  },\n  button: {\n    fontFamily: \"Varela Round\",\n    textDecoration: \"none\",\n  },\n}));\n\nexport default function LoginPage(props) {\n  const classes = useStyles();\n  const { state } = props;\n\n  return (\n    <div className=\"Login\">\n      <h1 className={classes.header}>Meowtivate!</h1>\n      <h2 className={classes.header}>Login</h2>\n    <form className={classes.root} noValidate autoComplete=\"off\">\n      <div>\n        <TextField id=\"outlined-basic\" label=\"Username\" variant=\"outlined\" value=\"Pawthos\" />\n      </div>\n      <div>\n      <TextField id=\"outlined-basic\" label=\"Password\" variant=\"outlined\" value=\"****\"/>\n      </div>\n      <Button \n        variant=\"contained\" \n        color=\"secondary\"\n        component={Link}\n        to='/lists'>\n      Login\n      </Button>\n    </form>\n    </div>\n  )\n};","/Users/ag/lighthouse/meowtivate/front-end/src/pages/WelcomePage.jsx",["149"],"import axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Link } from \"react-router-dom\";\nimport Button from \"@material-ui/core/Button\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    fontFamily: \"Varela Round\",\n  },\n  logo: {\n    fontFamily: \"itim\",\n    letterSpacing: \"8px\",\n  },\n  header: {\n    fontFamily: \"Varela Round\",\n    letterSpacing: \"6px\",\n  },\n  button: {\n    fontFamily: \"Varela Round\",\n    textDecoration: \"none\",\n  },\n}));\n\nexport default function WelcomePage(props) {\n  let history = useHistory();\n\n  const login = () => {\n    axios.get(\"/api/login/1\").then((res) => {\n      console.log(res);\n      history.push(\"/dashboard\");\n    });\n  };\n  // const { state } = props;\n  const classes = useStyles();\n\n  return (\n    <div className=\"Welcome\">\n      <h2 className={classes.header}>Welcome to </h2>\n      <h1 className={classes.logo}>Meowtivate!</h1>\n      <div>\n        <Button\n          className={classes.button}\n          variant=\"contained\"\n          color=\"primary\"\n          component={Link}\n          to=\"/register\"\n        >\n          Sign Up\n        </Button>\n        <Button\n          className={classes.button}\n          variant=\"contained\"\n          color=\"secondary\"\n          component={Link}\n          to=\"/login\"\n        >\n          Login\n        </Button>\n      </div>\n    </div>\n  );\n}\n","/Users/ag/lighthouse/meowtivate/front-end/src/pages/RegisterPage.jsx",["150"],"import TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Link } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    fontFamily: \"Varela Round\",\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n  },\n  logo: {\n    fontFamily: \"itim\",\n    letterSpacing: \"8px\",\n  },\n  header: {\n    fontFamily: \"Varela Round\",\n    letterSpacing: \"6px\",\n  },\n  button: {\n    fontFamily: \"Varela Round\",\n    textDecoration: \"none\",\n  },\n}));\n\nexport default function RegisterPage(props) {\n  const classes = useStyles();\n  const { state } = props;\n\n  return (\n    <div className=\"Register\">\n      <h1 className={classes.header}>Meowtivate!</h1>\n      <h2 className={classes.header}>Register</h2>\n      <form className={classes.root} noValidate autoComplete=\"off\">\n        <div>\n          <TextField id=\"outlined-basic\" label=\"Username\" variant=\"outlined\" />\n        </div>\n        <div>\n          <TextField id=\"outlined-basic\" label=\"Email\" variant=\"outlined\" />\n        </div>\n        <div>\n          <TextField id=\"outlined-basic\" label=\"Name\" variant=\"outlined\" />\n        </div>\n        <div>\n          <TextField id=\"outlined-basic\" label=\"Password\" variant=\"outlined\" />\n        </div>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          component={Link}\n          to=\"/dashboard\"\n        >\n          Register\n        </Button>\n      </form>\n    </div>\n  );\n}\n","/Users/ag/lighthouse/meowtivate/front-end/src/pages/InventoryPage.jsx",[],"/Users/ag/lighthouse/meowtivate/front-end/src/pages/ShopPage.jsx",[],"/Users/ag/lighthouse/meowtivate/front-end/src/pages/CatsPage.jsx",[],"/Users/ag/lighthouse/meowtivate/front-end/src/pages/AccountPage.jsx",["151"],"import React, { useState, useEffect } from \"react\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport NavBar from \"../components/NavBar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport SaveRoundedIcon from \"@material-ui/icons/SaveRounded\";\nimport EditRoundedIcon from \"@material-ui/icons/EditRounded\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    minWidth: 275,\n  },\n  header: {\n    fontFamily: \"Varela Round\",\n    letterSpacing: \"6px\",\n  },\n}));\n\nexport default function AccountPage(props) {\n  // const user = props.state.account[0];\n  // console.log(\"AccountPage\", user);\n  // const { username, email } = user;\n\n  const classes = useStyles();\n\n  // Toggle between VIEW and EDIT modes\n  const [isEditable, setIsEditable] = useState(false);\n  const modeToggle = () => setIsEditable(!isEditable);\n\n  return (\n    <div className={classes.root}>\n      <NavBar />\n      <header>\n        <h2 className={classes.header}>my Account</h2>\n      </header>\n      <Card>\n        {props && (\n          <CardContent>\n            <h5>Username: Pawthos</h5>\n            <h5>Email: pawthos@gmail.com</h5>\n            <h5>Password: ********* </h5>{\" \"}\n          </CardContent>\n        )}\n      </Card>\n      <IconButton onClick={modeToggle}>\n        <EditRoundedIcon />\n      </IconButton>\n      {isEditable && (\n        <div>\n          Hello\n          <form className={classes.root} noValidate autoComplete=\"off\">\n            <div>\n              <TextField\n                id=\"outlined-basic\"\n                label=\"Username\"\n                variant=\"outlined\"\n              />\n            </div>\n            <div>\n              <TextField id=\"outlined-basic\" label=\"Email\" variant=\"outlined\" />\n            </div>\n\n            <div>\n              <TextField\n                id=\"outlined-basic\"\n                label=\"Password\"\n                variant=\"outlined\"\n              />\n            </div>\n            <IconButton>\n              <SaveRoundedIcon onClick={modeToggle} />\n            </IconButton>\n          </form>\n        </div>\n      )}\n    </div>\n  );\n}\n","/Users/ag/lighthouse/meowtivate/front-end/src/pages/ListsPage.jsx",[],"/Users/ag/lighthouse/meowtivate/front-end/src/pages/DashboardPage.jsx",["152","153"],"import React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { Weather } from \"../components/Weather\";\nimport { CalendarApp } from \"../components/Calendar-import\";\nimport NavBar from \"../components/NavBar\";\nimport Button from \"@material-ui/core/Button\";\nimport { Link } from \"react-router-dom\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\n// import getCurrentDate from \"../helpers/getCurrentDate\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    paddingLeft: \"5vw\",\n    paddingRight: \"5vw\",\n    margin: \"auto\",\n  },\n}));\n\nexport default function DashboardPage(props) {\n  // const { state, user } = props;\n  const { state, streak, day, setDay } = props;\n  // const { unlocked } = state;\n  const classes = useStyles();\n  // console.log(\"dashboard\", state.logDatas);\n\n  // Go to next day\n  const changeDay = () => {\n    if (day >= 1 && day < 3) {\n      setDay((prev) => prev + 1);\n    }\n  };\n\n  return (\n    <div>\n      <NavBar />\n      <Grid container spacing={3} className={classes.root}>\n        <Grid item xs={4}>\n          {/* // <CalendarApp items={state.logDatas} /> */}\n          <CalendarApp state={state} day={day} />\n        </Grid>\n        <Grid item xs={4}>\n          <Card>\n            <CardContent>\n              <Grid item>\n                <Button component={Link} to=\"/lists\">\n                  My Lists\n                </Button>\n              </Grid>\n              <Grid item>\n                <Button component={Link} to=\"/cats\">\n                  My Collection\n                </Button>\n              </Grid>\n              <Grid item>\n                <Button component={Link} to=\"/account\">\n                  My Account\n                </Button>\n              </Grid>\n            </CardContent>\n          </Card>\n\n          <Card>STREAK {streak} DAYS</Card>\n          <Card>{streak * 100} MEOWCOINS</Card>\n\n          <Button variant=\"contained\" onClick={changeDay}>\n            NEXT DAY\n          </Button>\n        </Grid>\n        <Grid item xs={4}>\n          <Card>\n            <CardContent>\n              <Weather />\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","/Users/ag/lighthouse/meowtivate/front-end/src/helpers/stateHelpers.js",[],"/Users/ag/lighthouse/meowtivate/front-end/src/components/Weather.js",["154","155"],"import React from \"react\";\nimport { useState, useEffect, className } from \"react\";\nimport \"./styles/weather.css\";\n\nconst api = {\n  key: process.env.REACT_APP_WEATHER_API_KEY,\n  base: \"https://api.openweathermap.org/data/2.5/\",\n};\n\n// api.openweathermap.org/data/2.5/\n// weather?lat={lat}&lon={lon}&appid={API key}\n\nexport const Weather = () => {\n  // const [city, setCity] = useState(\"\");\n  const [weather, setWeather] = useState(\"\");\n\n  // const search = (event) => {\n  //   if (event.key === \"Enter\") {\n  //     fetch(`${api.base}weather?q=${city}&units=metric&APPID=${api.key}`)\n  //       .then((res) => res.json())\n  //       .then((result) => {\n  //         setWeather(result);\n  //         console.log(result);\n  //       });\n  //   }\n  // };\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition((position) => {\n      fetch(`${api.base}weather?lat=${position.coords.latitude}&lon=${position.coords.longitude}&units=metric&appid=${api.key}`)\n      .then((res) => res.json())\n      .then((result) => {\n        setWeather(result);\n        console.log(result);\n      });\n    });\n  }, [])\n  return (\n    <div\n      className={\n        typeof weather.main != \"undefined\"\n          ? weather.weather[0].main.includes(\"Cloud\")\n            ? \"weather Clouds\"\n            : \"weather\"\n          : \"weather\"\n      }\n    >\n      <section className=\"weather\">\n        {/* <div className=\"weather-search-box\">\n          <input\n            type=\"text\"\n            className=\"city-search-bar\"\n            placeholder=\"City...\"\n            onChange={(e) => setCity(e.target.value)}\n            value={city}\n            onKeyPress={search}\n          />\n        </div> */}\n        {typeof weather.main != \"undefined\" ? (\n          <div>\n            <div className=\"location-box\">\n              <div className=\"location\">\n                {weather.name}, {weather.sys.country}\n              </div>\n            </div>\n            <div className=\"temp\">{Math.round(weather.main.temp)}&deg;c</div>\n            <div className=\"weather\">{weather.weather[0].main}</div>\n            <div><img \n            className={weather.weather[0].main} \n            style={{display: 'block'}} \n            src={`https://meowtivate.s3-us-west-2.amazonaws.com/${weather.weather[0].main}.png`} \n            alt=\"weather-image\"/>\n            </div>\n          </div>\n        ) : (\n          \"\"\n        )}\n      </section>\n    </div>\n  );\n};\n","/Users/ag/lighthouse/meowtivate/front-end/src/components/Calendar-import.js",["156","157"],"import React, { useState, useEffect } from \"react\";\n\nimport \"react-modern-calendar-datepicker/lib/DatePicker.css\";\nimport { Calendar } from \"react-modern-calendar-datepicker\";\nimport \"./styles/calendar.css\";\nimport getCurrentDate from \"../helpers/getCurrentDate\";\n\nexport const CalendarApp = (props) => {\n  // const defaultValue = {\n  //   year: 2021,\n  //   month: 1,\n  //   day: 1,\n  // };\n  // const [selectedDay, setSelectedDay] = useState(defaultValue);\n  // // console.log(\"calender\", props.items);\n\n  // // const logDatas = { props };\n  // // console.log(\"logDatas\", logDatas);\n  // const date = props.items.filter((item) => item.is_completed === true);\n  // let dayDates = date.map((item) => item.date_created.substring(8, 10));\n  // const parseIntDayArray = dayDates.map((item) => parseInt(item));\n\n  // // [\n  // // here we add some CSS classes\n  // //   { year: 2021, month: 1, day: 4, className: \"purpleDay\" },\n  // // ]\n\n  // let dayObject = parseIntDayArray.map((item) => ({\n  //   year: 2021,\n  //   month: 1,\n  //   day: item,\n  //   className: \"purpleDay\",\n  // }));\n\n  // return (\n  //   <>\n  //     <Calendar\n  //       value={selectedDay}\n  //       onChange={setSelectedDay}\n  //       shouldHighlightWeekends\n  //       customDaysClassName={dayObject}\n  //     />\n  //   </>\n\n  // Show different streak length depending on user id\n  const { state, day } = props;\n  console.log(\"state in calendar\", state);\n  const { account, unlocked } = state;\n  // console.log(\"account\", account)\n  const id = day ? day : 0;\n  // const id = 4;\n\n  const streak1 = {\n    from: {\n      year: 2021,\n      month: 1,\n      day: 24,\n    },\n    to: {\n      year: 2021,\n      month: 1,\n      day: 26,\n    },\n  };\n  const streak1Add = {\n    from: {\n      year: 2021,\n      month: 1,\n      day: 24,\n    },\n    to: {\n      year: 2021,\n      month: 1,\n      day: 27,\n    },\n  };\n  const streak2 = {\n    from: {\n      year: 2021,\n      month: 1,\n      day: 24,\n    },\n    to: {\n      year: 2021,\n      month: 1,\n      day: 27,\n    },\n  };\n  const streak3 = [];\n  const streaksArray = [streak1, streak2, streak3, streak1Add];\n  const initialStreak = streaksArray[id - 1];\n\n  // Show different today selection depending on user id\n  const today1 = { year: 2021, month: 1, day: 27, className: \"todaySelect\" };\n  const today2 = { year: 2021, month: 1, day: 28, className: \"todaySelect\" };\n  const today3 = { year: 2021, month: 1, day: 29, className: \"todaySelect\" };\n  const todayArray = [today1, today2, today3];\n  const initialToday = todayArray[id - 1];\n\n  useEffect(() => {\n    setSelectedDayRange(streaksArray[id - 1]);\n    setToday(todayArray[id - 1]);\n    console.log(\"id in useEffect\", id);\n  }, [account]);\n\n  const [selectedDayRange, setSelectedDayRange] = useState(initialStreak);\n  const [today, setToday] = useState(initialToday);\n\n  useEffect(() => {\n    const today = getCurrentDate();\n    const currentUnlocked = unlocked.map((obj) =>\n      obj.date_unlocked.slice(0, 10)\n    );\n    const todayUnlockExists = currentUnlocked.includes(today);\n\n    console.log(\"calendar id\", id === 1);\n    console.log(\"calendar todayUnlockExists\", todayUnlockExists);\n    if (id === 1 && todayUnlockExists) {\n      setSelectedDayRange(streak1Add);\n    }\n  }, [unlocked]);\n\n  return (\n    <Calendar\n      value={selectedDayRange}\n      onChange={setSelectedDayRange}\n      // colorPrimary=\"#0fbcf9\" // Range start and end\n      // colorPrimaryLight=\"rgba(75, 207, 250, 0.4)\" // Range middle\n      calendarTodayClassName=\"custom-today-day\"\n      shouldHighlightWeekends\n      customDaysClassName={[\n        // here we add some CSS classes\n        today,\n      ]}\n      renderFooter={() => (\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            padding: \"1rem 2rem\",\n          }}\n          className=\"footer\"\n        >\n          🌱 CURRENT STREAK\n        </div>\n      )}\n    />\n  );\n};\n","/Users/ag/lighthouse/meowtivate/front-end/src/components/InventoryItem.jsx",[],"/Users/ag/lighthouse/meowtivate/front-end/src/components/NavBar.jsx",[],"/Users/ag/lighthouse/meowtivate/front-end/src/components/ShopItem.jsx",[],"/Users/ag/lighthouse/meowtivate/front-end/src/components/GalleryContainer.jsx",[],"/Users/ag/lighthouse/meowtivate/front-end/src/components/ListsContainer.jsx",["158","159","160","161","162","163","164"],"import React, { useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport ActionList from \"./ActionList\";\nimport CatPlant from \"./CatPlant\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Progress from \"./Progress\";\nimport UnlockBadge from \"./UnlockBadge\";\nimport calculateChecked from \"../helpers/calculateChecked\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    minWidth: \"10vw\",\n    minHeight: \"25vh\",\n    paddingLeft: \"5vw\",\n    paddingRight: \"5vw\",\n  },\n  header: {\n    fontFamily: \"Varela Round\",\n    letterSpacing: \"8px\",\n  },\n  plantbox: {\n    position: \"static\",\n    zIndex: 1,\n    minWidth: \"10vw\",\n    minHeight: \"40vh\",\n    paddingLeft: \"5vw\",\n    paddingRight: \"5vw\",\n  },\n  lists: {\n    minWidth: \"10vw\",\n    minHeight: \"50vh\",\n  },\n}));\n\nexport default function ListContainer(props) {\n  const { state, actionFunctions, catFunctions, user } = props;\n  const { actions, todos, habits, unlocked, streaks, logDatas } = state;\n  const classes = useStyles();\n\n  const { postLogData, updateStreak } = actionFunctions;\n  console.log(\"actionFunctions in ListsContainer\", actionFunctions);\n  console.log(\"streaks in ListsContainer\", streaks);\n  console.log(\"streaks in logDatas\", logDatas);\n\n  const completed = actions.filter((obj) => obj.is_completed === true);\n  const checkedHabits = completed.filter((obj) => obj.category_id === 2);\n  const checkedTodos = completed.filter((obj) => obj.category_id === 1);\n  const habitIDs = calculateChecked(checkedHabits);\n  const todoIDs = calculateChecked(checkedTodos);\n\n  const totalAmount = actions.length;\n  const completedAmount = completed.length;\n  const completedPercentage = completedAmount / totalAmount;\n  const undoneAmount = totalAmount - completedAmount;\n\n  let today = new Date();\n  const dd = String(today.getDate()).padStart(2, \"0\");\n  const mm = String(today.getMonth() + 1).padStart(2, \"0\"); //January is 0\n  const yyyy = today.getFullYear();\n  today = `${yyyy}-${mm}-${dd}`;\n\n  console.log(\"rightnow\", today);\n\n  // useEffect(() => {\n  //   if (streaks) {\n  //     return () => {\n  //       const currentStreaksE = streaks.map((obj) =>\n  //         obj.date_update.slice(0, 10)\n  //       );\n  //       const todayStreakExists = currentStreaksE.includes(today);\n  //       const currentLog = logDatas.map((obj) => obj.date_created.slice(0, 10));\n  //       const todayLogExists = currentLog.includes(today);\n\n  //       if (completedPercentage >= 1 && !todayStreakExists) {\n  //         let val = streaks[0].current_streak + 1;\n  //         updateStreak(1, val);\n  //       }\n  //       if (completedPercentage >= 1 && !todayLogExists) {\n  //         postLogData(1, today);\n  //       }\n  //     };\n  //   }\n  // }, [streaks, logDatas]);\n\n  // console.log(\"Does the streaks changes?\", streaks);\n  // console.log(\"Does the logDatas changes?\", logDatas);\n\n  // console.log(\"Does toady\", todayStreakExists);\n  // const getStreak = (streaks) => {\n  //   if (!streaks) {\n  //     return streaks[0].current_streak;\n  //   }\n  //   const current_streak = getStreak(streaks);\n  //   console.log(\"curren_streak\", current_streak);\n  //   return \"updating streak\";\n  // };\n  // const currentUser = user.accounts[0].username;\n  // // console.log(\"user\", currentUser);\n  return (\n    <>\n      <UnlockBadge state={state} catFunctions={catFunctions} />\n      <div className={classes.root}>\n        <h2 className={classes.header}>LET'S GET LOTS DONE TODAY</h2>\n        <Grid container spacing={4}>\n          <Grid item xs={4}>\n            <Card className={classes.lists}>\n              <CardContent>\n                <h3>Daily Habits</h3>\n                <ActionList\n                  items={habits}\n                  category={2}\n                  actionFunctions={actionFunctions}\n                  initChecked={habitIDs}\n                />\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={4}>\n            <Card className={classes.lists}>\n              <CardContent>\n                <h3>To-Do Today</h3>\n                <ActionList\n                  items={todos}\n                  category={1}\n                  actionFunctions={actionFunctions}\n                  initChecked={todoIDs}\n                />\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={4}>\n            <Card>\n              <CardContent>\n                {/* <div>\n              </div> */}\n                <div className={classes.plantbox}>\n                  <h3>Today's Progress</h3>\n                  <CatPlant actions={actions} />\n                </div>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Progress\n            completedPercentage={completedPercentage}\n            completedAmount={completedAmount}\n            totalAmount={totalAmount}\n          />\n        </Grid>\n      </div>\n    </>\n  );\n}\n","/Users/ag/lighthouse/meowtivate/front-end/src/helpers/calculateChecked.js",[],"/Users/ag/lighthouse/meowtivate/front-end/src/components/GalleryItem.js",[],"/Users/ag/lighthouse/meowtivate/front-end/src/components/Menu.jsx",[],"/Users/ag/lighthouse/meowtivate/front-end/src/components/CatPlant.jsx",["165","166","167"],"import React, {useState, useEffect} from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport clsx from \"clsx\";\n\nconst useStyles = makeStyles(theme => ({\n  pot: {\n    display: 'block',\n    width: '12vw',\n    position:'absolute',\n    bottom: '0px',\n    left: 'calc(50% - 6vw)',\n    zIndex: 2,\n  },\n  plant: {\n    opacity: 0,\n    width: '13vw',\n    position:'relative',\n    zIndex: 1,\n  },\n  plantContainer: {\n  position: 'relative',\n\n  },\n  animatedItem: {\n    animation: `$myEffect 1500ms ${theme.transitions.easing.easeInOut}`,\n\n  },\n\n  \"@keyframes myEffect\": {\n    '0%': {\n      transform: 'translateY(30%)',\n      opacity: 0,\n\n    },\n    '16%': {\n      transform: 'translateY(-3%)',\n      opacity: 1,\n\n    },\n    '28%': {\n      transform: 'translateY(5%)',\n\n    },\n    '44%': {\n      transform: 'translateY(-2%)'\n    },\n    '59%': {\n      transform: 'translateY(0%)'\n    },\n    '73%': {\n      transform: 'translateY(0%)'\n    },\n    '88%': {\n      transform: 'translateY(0%)'\n    },\n    '100%': {\n      transform: 'translateY(0%)'\n    }, \n  }\n}));\n\nexport default function CatPlant(props) {\n  const classes = useStyles();\n  const { actions } = props;\n  const [start, setStart] = React.useState(false);\n  let timer;\n\n  // Calculate percentage\n  const totalAmount = actions.length;\n  const totalCompleted = actions.filter(obj => obj.is_completed === true).length;\n  const initial = ( totalCompleted / totalAmount ) * 100;\n  const num = Math.floor(initial / 10) * 10;\n\n  // const [percentage, setPercentage] = useState(initial);\n  \n  useEffect(() => {\n    setStart(true);\n    timer = setTimeout(() => setStart(false), 1500);\n  }, [actions])\n\n  useEffect(() => {\n    return () => clearInterval(timer);\n  }, [start])\n\n  return (\n      <div className={classes.plantContainer}>\n        <img className={clsx(classes.plant,\n          {[classes.animatedItem]: start}\n        )} src={`https://meowtivate.s3-us-west-2.amazonaws.com/plants/${num}plant.png`} alt=\"plant\" style={{opacity: 1}}/>\n        <img className={classes.pot} src=\"https://meowtivate.s3-us-west-2.amazonaws.com/pots/01pot.png\" alt=\"pot\"/>\n      </div>\n);\n}","/Users/ag/lighthouse/meowtivate/front-end/src/components/Progress.jsx",[],"/Users/ag/lighthouse/meowtivate/front-end/src/components/ActionList.jsx",["168"],"import React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport EditRoundedIcon from \"@material-ui/icons/EditRounded\";\nimport DeleteRoundedIcon from \"@material-ui/icons/DeleteRounded\";\nimport UnfoldMoreRoundedIcon from \"@material-ui/icons/UnfoldMoreRounded\";\nimport SaveRoundedIcon from \"@material-ui/icons/SaveRounded\";\nimport Popup from \"./Popup\";\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\n\nconst useStyles = makeStyles((theme) => ({\n  item: {\n    fontFamily: \"Varela Round\",\n  },\n}));\n\nexport default function ActionList(props) {\n  const { items, category, actionFunctions, initChecked } = props;\n  const {\n    deleteAction,\n    addAction,\n    editActionName,\n    editCompletedState,\n  } = actionFunctions; // State changing funcs from useApplicationData\n  const classes = useStyles();\n\n  console.log(\"checked in ActionList\", initChecked);\n\n  // Toggle between VIEW and EDIT modes\n  const [isEditable, setIsEditable] = useState(false);\n  const modeToggle = () => setIsEditable(!isEditable);\n\n  // Toggle checkbox\n  // checked is an array of numbers that represent checked actionIDs\n  const [checked, setChecked] = useState(initChecked);\n\n  const handleToggle = (value, evt) => {\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      // if value isn't in checked, add it\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1); // else remove from checked\n    }\n\n    setChecked(newChecked);\n    editCompletedState(value, evt.target.checked); // Update state\n  };\n\n  // Popup state\n  const [popupState, setPopupState] = useState({\n    open: false,\n    type: \"\",\n    actionID: 0, // action_id for EDITING, otherwise 0 for ADDING\n    actionName: \"\",\n  });\n\n  // Popup functions\n  const handleClickOpen = (type, id, name) => {\n    setPopupState((prev) => ({\n      ...prev,\n      open: true,\n      type: type,\n      actionID: id,\n      actionName: name,\n    }));\n  };\n\n  const cancel = () => {\n    setPopupState((prev) => ({\n      ...prev,\n      open: false,\n    }));\n  };\n\n  const confirmDelete = (actionID) => {\n    deleteAction(actionID);\n    setPopupState((prev) => ({\n      ...prev,\n      open: false,\n    }));\n  };\n\n  const confirmAdd = (name, categoryID) => {\n    addAction(name, categoryID);\n    setPopupState((prev) => ({\n      ...prev,\n      open: false,\n    }));\n  };\n\n  const confirmEdit = (actionID, name) => {\n    editActionName(actionID, name);\n    setPopupState((prev) => ({\n      ...prev,\n      open: false,\n    }));\n  };\n\n  return (\n    <List className={classes.root}>\n      {items\n        .sort(function (a, b) {\n          return a.id - b.id;\n        })\n        .map((obj) => {\n          const labelId = `checkbox-list-label-${obj.id}`;\n          return (\n            <ListItem\n              key={obj.id}\n              role={undefined}\n              dense\n              button\n              onClick={(evt) => handleToggle(obj.id, evt)}\n            >\n              <ListItemIcon>\n                <Checkbox\n                  edge=\"start\"\n                  checked={obj.is_completed}\n                  tabIndex={-1}\n                  disableRipple\n                  inputProps={{ \"aria-labelledby\": labelId }}\n                />\n              </ListItemIcon>\n              <ListItemText id={labelId} primary={obj.action_name} />\n              {isEditable && (\n                <ListItemSecondaryAction>\n                  <IconButton edge=\"end\" aria-label=\"drag\">\n                    <UnfoldMoreRoundedIcon />\n                  </IconButton>\n                  <IconButton edge=\"end\" aria-label=\"delete\">\n                    <DeleteRoundedIcon\n                      onClick={() =>\n                        handleClickOpen(\"Delete\", obj.id, obj.action_name)\n                      }\n                    />\n                  </IconButton>\n                  <IconButton edge=\"end\" aria-label=\"edit\">\n                    <EditRoundedIcon\n                      onClick={() =>\n                        handleClickOpen(\"Edit\", obj.id, obj.action_name)\n                      }\n                    />\n                  </IconButton>\n                </ListItemSecondaryAction>\n              )}\n            </ListItem>\n          );\n        })}\n\n      {isEditable ? (\n        <>\n          <IconButton>\n            <AddCircleIcon onClick={() => handleClickOpen(\"Add\", 0, \"\")} />\n          </IconButton>\n          <IconButton onClick={modeToggle}>\n            <SaveRoundedIcon />\n          </IconButton>\n        </>\n      ) : (\n        <IconButton onClick={modeToggle}>\n          <EditRoundedIcon />\n        </IconButton>\n      )}\n\n      <Popup\n        cancel={cancel}\n        confirmDelete={confirmDelete}\n        confirmAdd={confirmAdd}\n        confirmEdit={confirmEdit}\n        popupState={popupState}\n        category={category}\n      />\n    </List>\n  );\n}\n","/Users/ag/lighthouse/meowtivate/front-end/src/components/UnlockBadge.jsx",["169","170","171"],"import React, { useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\nimport getCurrentDate from \"../helpers/getCurrentDate\";\n\nconst useStyles = makeStyles((theme) => ({\n  // display: {\n  //   display: 'block',\n  // },\n  root: {\n    flexGrow: 1,\n    maxHeight: \"20rem\",\n    position: \"absolute\",\n    top: \"calc(50% - 10rem)\",\n    left: \"calc(50% - 10rem)\",\n    zIndex: 100,\n  },\n  cat: {\n    height: \"15rem\",\n    position: \"absolute\",\n    top: \"calc(50% - 7rem)\",\n    left: \"calc(50% - 5rem)\",\n    zIndex: 101,\n  },\n  text: {\n    color: \"#a0cdca\",\n    fontFamily: \"Itim\",\n    fontSize: \"3.5em\",\n    position: \"absolute\",\n    top: \"calc(50% + 3rem)\",\n    left: \"calc(50% - 4.25em)\",\n    zIndex: 102,\n    WebkitTextStroke: \"darksalmon\",\n    WebkitTextStrokeWidth: \"thin\",\n  },\n}));\n\nexport default function UnlockBadge(props) {\n  const classes = useStyles();\n  const { state, catFunctions } = props;\n  const { actions, unlocked, allCats } = state;\n  const { addUnlocked } = catFunctions;\n  const [display, setDisplay] = useState({ display: \"none\" });\n  const [catID, setCatID] = useState(\"01\");\n\n  //click away hook\n  const [open, setOpen] = React.useState(false);\n\n  // Calculate percentage of actions done\n  const totalAmount = actions.length;\n  const totalCompleted = actions.filter((obj) => obj.is_completed === true)\n    .length;\n  const initial = (totalCompleted / totalAmount) * 100;\n  const percentage = Math.floor(initial / 10) * 10;\n\n  // Get current date\n  // let today = new Date();\n  // const dd = String(today.getDate()).padStart(2, \"0\");\n  // const mm = String(today.getMonth() + 1).padStart(2, \"0\"); //January is 0\n  // const yyyy = today.getFullYear();\n  // today = `${yyyy}-${mm}-${dd}`;\n  // let today = new Date();\n  // const dd = String(today.getDate()).padStart(2, '0');\n  // const mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0\n  // const yyyy = today.getFullYear();\n  // today = `${yyyy}-${mm}-${dd}`;\n  const today = getCurrentDate();\n\n  // console.log(\"date (unlocked)\", today)\n  // console.log(\"unlocked\", unlocked);\n\n  const currentUnlocked = unlocked.map((obj) => obj.date_unlocked.slice(0, 10));\n  const todayUnlockExists = currentUnlocked.includes(today);\n\n  //Decide whether to display badge\n  const decideDisplay = (percentage) => {\n    console.log(\"does unlock exist today?\", todayUnlockExists);\n\n    // If 100% complete and an unlock for today doesn't exist, unlock a cat\n    if (percentage === 100 && !todayUnlockExists) {\n      // Get locked cats IDs array\n      const unlockedCatsIDs = unlocked.map((obj) => obj.id);\n      const lockedCats = allCats.filter(\n        (obj) => !unlockedCatsIDs.includes(obj.id)\n      );\n      const lockedCatsIDs = lockedCats.map((obj) => obj.id);\n\n      // Randomly choose one from a range\n      const randomCatID =\n        lockedCatsIDs[Math.floor(Math.random() * lockedCatsIDs.length)];\n\n      // If cat_id is single digit, convert to string with 0 in front\n      if (randomCatID <= 9) {\n        setCatID(`0${randomCatID.toString()}`);\n      } else {\n        setCatID(randomCatID.toString());\n      }\n\n      setDisplay({ display: \"block\" });\n      setOpen(true);\n\n      // console.log(\"catID\", catID);\n      // console.log(\"display\", display);\n    }\n  };\n\n  // Run function to decide display\n  useEffect(() => {\n    // console.log(\"CURRENT PERCENTAGE IN USEEFFECT\", percentage);\n    if (percentage < 100) {\n      setDisplay({ display: \"none\" });\n    }\n    decideDisplay(percentage);\n  }, [actions]);\n\n  useEffect(() => {\n    // Call function to send POST req + change 'unlocked' state\n    // Takes in a cat_id and user_id\n    // console.log(\"display in useEffect\", display);\n    if (display.display === \"block\") {\n      addUnlocked(Number(catID), 1);\n    }\n  }, [display]);\n\n  const handleClickAway = () => {\n    setOpen(false);\n  };\n\n  return (\n    <ClickAwayListener onClickAway={handleClickAway}>\n      <div className={classes.display} style={display}>\n        {open ? (\n          <>\n            <img\n              className={classes.root}\n              src=\"https://meowtivate.s3-us-west-2.amazonaws.com/unlock_badge.png\"\n              alt=\"unlock_badge\"\n            />\n            <img\n              className={classes.cat}\n              src={`https://meowtivate.s3-us-west-2.amazonaws.com/${catID}cat.png`}\n            />\n            <h2 className={classes.text}> CONGRATULATIONS!</h2>\n          </>\n        ) : null}\n      </div>\n    </ClickAwayListener>\n  );\n}\n","/Users/ag/lighthouse/meowtivate/front-end/src/components/Popup.jsx",["172"],"import React, { useState, useEffect } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContentText from '@material-ui/core/DialogContentText';\n\nexport default function Popup(props) {\n  const { \n    confirmDelete, \n    confirmAdd, \n    confirmEdit, \n    cancel, \n    popupState, \n    category } = props;\n  const { open, type, actionID, actionName } = popupState;\n  const listType = category === 1 ? \"to-do\" : \"habit\";\n\n  // Making form a controlled component\n  const [name, setName] = useState(actionName);\n\n  // Prevent stale props by re-rendering when actionName changes in parent\n  useEffect(() => {\n    setName(actionName)\n  }, [actionName])\n\n  const clearAndCancel = () => {\n    setName(\"\");\n    cancel();\n  }\n\n  const clearAndConfirmAdd = () => {\n    setName(\"\");\n    confirmAdd(name, category);\n  }\n\n  console.log(\"actionName\", actionName);\n\n  return (\n    <div>\n      { type === \"Delete\" && (\n        <Dialog\n        open={open}\n        onClose={cancel}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{type} {listType}?</DialogTitle>\n        <DialogContent>\n          {/* <DialogContentText>\n          {actionID}\n          </DialogContentText> */}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => confirmDelete(actionID)} color=\"primary\">\n            Confirm\n          </Button>\n          <Button onClick={cancel} color=\"primary\" autoFocus>\n            Cancel\n          </Button>\n        </DialogActions>\n      </Dialog>\n      )}\n\n      { type === \"Edit\" && (\n        <Dialog open={open} onClose={cancel} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">{type} a {listType}</DialogTitle>\n        <DialogContent>\n          {/* <DialogContentText>\n            {actionID}\n          </DialogContentText> */}\n          <form autoComplete=\"off\" onSubmit={(event) => event.preventDefault()}>\n            <TextField\n              autoFocus\n              margin=\"dense\"\n              id=\"name\"\n              type=\"text\"\n              value={name}\n              onChange={(event) => setName(event.target.value)}\n              fullWidth\n            />\n          </form>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={cancel} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={() => confirmEdit(actionID, name)} color=\"primary\">\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n      )}\n\n      { type === \"Add\" && (\n        <Dialog open={open} onClose={cancel} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">{type} a {listType}</DialogTitle>\n        <DialogContent>\n          {/* <DialogContentText>\n            {actionID}\n          </DialogContentText> */}\n          <form autoComplete=\"off\" onSubmit={(event) => event.preventDefault()}>\n            <TextField\n              autoFocus\n              margin=\"dense\"\n              id=\"name\"\n              type=\"text\"\n              value={name}\n              onChange={(event) => setName(event.target.value)}\n              fullWidth\n            />\n          </form>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={clearAndCancel} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={clearAndConfirmAdd} color=\"primary\">\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n      )}\n    </div>\n  );\n}\n",{"ruleId":"173","replacedBy":"174"},{"ruleId":"175","replacedBy":"176"},{"ruleId":"177","severity":1,"message":"178","line":9,"column":50,"nodeType":"179","messageId":"180","endLine":9,"endColumn":54},{"ruleId":"177","severity":1,"message":"181","line":38,"column":21,"nodeType":"179","messageId":"180","endLine":38,"endColumn":28},{"ruleId":"182","severity":1,"message":"183","line":63,"column":6,"nodeType":"184","endLine":63,"endColumn":13,"suggestions":"185"},{"ruleId":"177","severity":1,"message":"186","line":1,"column":28,"nodeType":"179","messageId":"180","endLine":1,"endColumn":36},{"ruleId":"177","severity":1,"message":"187","line":1,"column":38,"nodeType":"179","messageId":"180","endLine":1,"endColumn":47},{"ruleId":"188","severity":1,"message":"189","line":60,"column":30,"nodeType":"190","messageId":"191","endLine":60,"endColumn":32},{"ruleId":"177","severity":1,"message":"192","line":103,"column":11,"nodeType":"179","messageId":"180","endLine":103,"endColumn":21},{"ruleId":"177","severity":1,"message":"193","line":29,"column":11,"nodeType":"179","messageId":"180","endLine":29,"endColumn":16},{"ruleId":"177","severity":1,"message":"194","line":28,"column":9,"nodeType":"179","messageId":"180","endLine":28,"endColumn":14},{"ruleId":"177","severity":1,"message":"193","line":29,"column":11,"nodeType":"179","messageId":"180","endLine":29,"endColumn":16},{"ruleId":"177","severity":1,"message":"187","line":1,"column":27,"nodeType":"179","messageId":"180","endLine":1,"endColumn":36},{"ruleId":"177","severity":1,"message":"186","line":1,"column":17,"nodeType":"179","messageId":"180","endLine":1,"endColumn":25},{"ruleId":"177","severity":1,"message":"187","line":1,"column":27,"nodeType":"179","messageId":"180","endLine":1,"endColumn":36},{"ruleId":"177","severity":1,"message":"195","line":2,"column":31,"nodeType":"179","messageId":"180","endLine":2,"endColumn":40},{"ruleId":"196","severity":1,"message":"197","line":68,"column":18,"nodeType":"198","endLine":72,"endColumn":34},{"ruleId":"182","severity":1,"message":"199","line":104,"column":6,"nodeType":"184","endLine":104,"endColumn":15,"suggestions":"200"},{"ruleId":"182","severity":1,"message":"201","line":121,"column":6,"nodeType":"184","endLine":121,"endColumn":16,"suggestions":"202"},{"ruleId":"177","severity":1,"message":"187","line":1,"column":17,"nodeType":"179","messageId":"180","endLine":1,"endColumn":26},{"ruleId":"177","severity":1,"message":"186","line":1,"column":28,"nodeType":"179","messageId":"180","endLine":1,"endColumn":36},{"ruleId":"177","severity":1,"message":"203","line":39,"column":49,"nodeType":"179","messageId":"180","endLine":39,"endColumn":53},{"ruleId":"177","severity":1,"message":"204","line":40,"column":35,"nodeType":"179","messageId":"180","endLine":40,"endColumn":43},{"ruleId":"177","severity":1,"message":"205","line":43,"column":11,"nodeType":"179","messageId":"180","endLine":43,"endColumn":22},{"ruleId":"177","severity":1,"message":"206","line":43,"column":24,"nodeType":"179","messageId":"180","endLine":43,"endColumn":36},{"ruleId":"177","severity":1,"message":"207","line":57,"column":9,"nodeType":"179","messageId":"180","endLine":57,"endColumn":21},{"ruleId":"177","severity":1,"message":"186","line":1,"column":16,"nodeType":"179","messageId":"180","endLine":1,"endColumn":24},{"ruleId":"182","severity":1,"message":"208","line":78,"column":13,"nodeType":"209","endLine":78,"endColumn":52},{"ruleId":"182","severity":1,"message":"210","line":83,"column":6,"nodeType":"184","endLine":83,"endColumn":13,"suggestions":"211"},{"ruleId":"177","severity":1,"message":"187","line":1,"column":27,"nodeType":"179","messageId":"180","endLine":1,"endColumn":36},{"ruleId":"182","severity":1,"message":"212","line":114,"column":6,"nodeType":"184","endLine":114,"endColumn":15,"suggestions":"213"},{"ruleId":"182","severity":1,"message":"214","line":123,"column":6,"nodeType":"184","endLine":123,"endColumn":15,"suggestions":"215"},{"ruleId":"216","severity":1,"message":"217","line":139,"column":13,"nodeType":"198","endLine":142,"endColumn":15},{"ruleId":"177","severity":1,"message":"218","line":8,"column":8,"nodeType":"179","messageId":"180","endLine":8,"endColumn":25},"no-native-reassign",["219"],"no-negated-in-lhs",["220"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'account' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["221"],"'useState' is defined but never used.","'useEffect' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'undoneList' is assigned a value but never used.","'state' is assigned a value but never used.","'login' is assigned a value but never used.","'className' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'id', 'streaksArray', and 'todayArray'. Either include them or remove the dependency array.",["222"],"React Hook useEffect has missing dependencies: 'id' and 'streak1Add'. Either include them or remove the dependency array.",["223"],"'user' is assigned a value but never used.","'unlocked' is assigned a value but never used.","'postLogData' is assigned a value but never used.","'updateStreak' is assigned a value but never used.","'undoneAmount' is assigned a value but never used.","Assignments to the 'timer' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","React Hook useEffect has a missing dependency: 'timer'. Either include it or remove the dependency array.",["224"],"React Hook useEffect has missing dependencies: 'decideDisplay' and 'percentage'. Either include them or remove the dependency array.",["225"],"React Hook useEffect has missing dependencies: 'addUnlocked' and 'catID'. Either include them or remove the dependency array.",["226"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'DialogContentText' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"227","fix":"228"},{"desc":"229","fix":"230"},{"desc":"231","fix":"232"},{"desc":"233","fix":"234"},{"desc":"235","fix":"236"},{"desc":"237","fix":"238"},"Update the dependencies array to be: [id, state]",{"range":"239","text":"240"},"Update the dependencies array to be: [account, id, streaksArray, todayArray]",{"range":"241","text":"242"},"Update the dependencies array to be: [id, streak1Add, unlocked]",{"range":"243","text":"244"},"Update the dependencies array to be: [start, timer]",{"range":"245","text":"246"},"Update the dependencies array to be: [actions, decideDisplay, percentage]",{"range":"247","text":"248"},"Update the dependencies array to be: [addUnlocked, catID, display]",{"range":"249","text":"250"},[1816,1823],"[id, state]",[2693,2702],"[account, id, streaksArray, todayArray]",[3247,3257],"[id, streak1Add, unlocked]",[1723,1730],"[start, timer]",[3584,3593],"[actions, decideDisplay, percentage]",[3858,3867],"[addUnlocked, catID, display]"]